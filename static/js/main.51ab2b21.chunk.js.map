{"version":3,"sources":["components/poster/Poster.js","components/clock/Clock.js","components/contacts/Contacts.js","components/wrapper/Wrapper.js","serviceWorker.js","index.js"],"names":["Poster","className","Clock","props","state","fullDate","hours","minutes","seconds","Date","toLocaleDateString","weekday","month","day","this","setState","date","getHours","getMinutes","getSeconds","toString","updateDate","updateTime","timerID","setInterval","currentTime","clearInterval","Component","links","url","text","Contacts","map","block","index","key","href","Wrapper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAaeA,G,kBAVA,WACd,OACC,yBAAKC,UAAU,kBACd,yBAAKA,UAAU,iBAAf,oBACA,yBAAKA,UAAU,oBAAf,uBACA,6BACA,yBAAKA,UAAU,uBAAf,uB,4BCmEYC,G,wDAxEd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,SAAU,GACVC,MAAO,EACPC,QAAS,GACTC,QAAS,IANQ,E,yDAWlB,IACCH,GADU,IAAII,MACEC,mBAAmB,QAAS,CAC3CC,QAAS,OACTC,MAAO,OACPC,IAAK,YAEPC,KAAKC,SAAS,CACbV,SAAUA,M,mCAKX,IAAIW,EAAO,IAAIP,KACdH,EAAQU,EAAKC,WACbV,EAAUS,EAAKE,aACfV,EAAUQ,EAAKG,aAEhBb,EAAQ,GAAKA,EAAQ,IAAMA,EAAMc,WAAad,EAAMc,WACpDb,EAAU,GAAKA,EAAU,IAAMA,EAAQa,WAAab,EAAQa,WAC5DZ,EAAU,GAAKA,EAAU,IAAMA,EAAQY,WAAaZ,EAAQY,WAE5DN,KAAKC,SAAS,CACbT,MAAOA,EACPC,QAASA,EACTC,QAASA,M,oCAII,IAAD,OACbM,KAAKO,aACLP,KAAKQ,aACLR,KAAKS,QAAUC,aAAY,WAC1B,EAAKF,eACH,O,0CAIHR,KAAKW,gB,6CAILC,cAAcZ,KAAKS,W,+BAGV,IAAD,EAC4BT,KAAKV,MAAjCE,EADA,EACAA,MAAOC,EADP,EACOA,QAASC,EADhB,EACgBA,QACxB,OACC,yBAAKP,UAAU,YACd,yBAAKA,UAAU,WAAf,YACA,yBAAKA,UAAU,aAAaa,KAAKV,MAAMC,UACvC,6BACA,yBAAKJ,UAAU,QACd,yBAAKA,UAAU,SAASK,GACxB,yBAAKL,UAAU,WAAWM,GAC1B,yBAAKN,UAAU,WAAWO,S,GAlEXmB,cCAhBC,G,MAAQ,CACX,CACCC,IAAK,wBACLC,KAAM,YAEP,CACCD,IAAK,8BACLC,KAAM,SAEP,CACCD,IAAK,gDACLC,KAAM,cAmBOC,EAfE,WAChB,OACC,yBAAK9B,UAAU,iBACd,yBAAKA,UAAU,UAAf,cACA,yBAAKA,UAAU,SACb2B,EAAMI,KAAI,SAACC,EAAOC,GAAR,OACV,uBAAGC,IAAKD,EAAOjC,UAAU,OAAOmC,KAAMH,EAAMJ,KAC1CI,EAAMH,YCAEO,EAlBC,WACf,OACC,yBAAKpC,UAAU,cACd,yBAAKA,UAAU,kBACd,yBAAKA,UAAU,WACd,kBAAC,EAAD,OAED,yBAAKA,UAAU,SACd,kBAAC,EAAD,OAED,yBAAKA,UAAU,YACd,kBAAC,EAAD,UCNeqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.51ab2b21.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Poster.scss';\r\n\r\nconst Poster = () => {\r\n\treturn (\r\n\t\t<div className='poster-wrapper'>\r\n\t\t\t<div className='poster-header'>Georgii Zagladin</div>\r\n\t\t\t<div className='poster-subheader'>Front-end developer</div>\r\n\t\t\t<hr />\r\n\t\t\t<div className='poster-city-caption'>Saint Petersburg</div>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Poster;\r\n","import React, { Component } from 'react';\r\nimport './Clock.scss';\r\n\r\nclass Clock extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tfullDate: '',\r\n\t\t\thours: 0,\r\n\t\t\tminutes: '',\r\n\t\t\tseconds: '',\r\n\t\t};\r\n\t}\r\n\r\n\tupdateDate() {\r\n\t\tlet date = new Date(),\r\n\t\t\tfullDate = date.toLocaleDateString('en-EN', {\r\n\t\t\t\tweekday: 'long',\r\n\t\t\t\tmonth: 'long',\r\n\t\t\t\tday: 'numeric',\r\n\t\t\t});\r\n\t\tthis.setState({\r\n\t\t\tfullDate: fullDate,\r\n\t\t});\r\n\t}\r\n\r\n\tupdateTime() {\r\n\t\tlet date = new Date(),\r\n\t\t\thours = date.getHours(),\r\n\t\t\tminutes = date.getMinutes(),\r\n\t\t\tseconds = date.getSeconds();\r\n\r\n\t\thours < 10 ? hours = '0' + hours.toString() : hours.toString();\r\n\t\tminutes < 10 ? minutes = '0' + minutes.toString() : minutes.toString();\r\n\t\tseconds < 10 ? seconds = '0' + seconds.toString() : seconds.toString();\r\n\r\n\t\tthis.setState({\r\n\t\t\thours: hours,\r\n\t\t\tminutes: minutes,\r\n\t\t\tseconds: seconds,\r\n\t\t});\r\n\t}\r\n\r\n\tcurrentTime() {\r\n\t\tthis.updateDate();\r\n\t\tthis.updateTime();\r\n\t\tthis.timerID = setInterval(() => {\r\n\t\t\tthis.updateTime();\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.currentTime();\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timerID);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { hours, minutes, seconds } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className='timedate'>\r\n\t\t\t\t<div className='caption'>Today is</div>\r\n\t\t\t\t<div className='full-date'>{this.state.fullDate}</div>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<div className='time'>\r\n\t\t\t\t\t<div className='hours'>{hours}</div>\r\n\t\t\t\t\t<div className='minutes'>{minutes}</div>\r\n\t\t\t\t\t<div className='seconds'>{seconds}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Clock;\r\n","import React from 'react';\r\nimport './Contacts.scss';\r\n\r\nlet links = [\r\n\t{\r\n\t\turl: 'https://t.me/zagladin',\r\n\t\ttext: 'Telegram',\r\n\t},\r\n\t{\r\n\t\turl: 'mailto:georgii@zagladin.dev',\r\n\t\ttext: 'Email',\r\n\t},\r\n\t{\r\n\t\turl: 'https://www.linkedin.com/in/georgii-zagladin/',\r\n\t\ttext: 'LinkedIn',\r\n\t},\r\n];\r\n\r\nconst Contacts = () => {\r\n\treturn (\r\n\t\t<div className='contacts-card'>\r\n\t\t\t<div className='header'>Contact me</div>\r\n\t\t\t<div className='links'>\r\n\t\t\t\t{links.map((block, index) => (\r\n\t\t\t\t\t<a key={index} className='link' href={block.url}>\r\n\t\t\t\t\t\t{block.text}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport './Wrapper.scss';\r\n\r\nimport Poster from '../poster/Poster';\r\nimport Clock from '../clock/Clock';\r\nimport Contacts from '../contacts/Contacts';\r\n\r\nconst Wrapper = () => {\r\n\treturn (\r\n\t\t<div className='background'>\r\n\t\t\t<div className='grid-container'>\r\n\t\t\t\t<div className='weather'>\r\n\t\t\t\t\t<Poster />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='clock'>\r\n\t\t\t\t\t<Clock/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='contacts'>\r\n\t\t\t\t\t<Contacts />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Wrapper;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport Wrapper from './components/wrapper/Wrapper';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Wrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}