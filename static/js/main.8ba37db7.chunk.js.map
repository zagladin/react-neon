{"version":3,"sources":["components/clock/Clock.js","components/contacts/Contacts.js","components/poster/Poster.js","components/wrapper/Wrapper.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fullDate","hours","minutes","seconds","Date","toLocaleDateString","weekday","month","day","setState","date","getHours","getMinutes","getSeconds","toString","_this2","updateDate","updateTime","timerID","setInterval","currentTime","clearInterval","_this$state","react_default","a","createElement","className","Component","links","url","text","Contacts","map","block","index","key","href","Poster","Wrapper","components_poster_Poster","components_clock_Clock","components_contacts_Contacts","Boolean","window","location","hostname","match","ReactDOM","render","components_wrapper_Wrapper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TA6EeA,qBAzEd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,SAAU,GACVC,MAAO,EACPC,QAAS,GACTC,QAAS,IAPQX,4EAYlB,IACCQ,GADU,IAAII,MACEC,mBAAmB,QAAS,CAC3CC,QAAS,OACTC,MAAO,OACPC,IAAK,YAEPb,KAAKc,SAAS,CACbT,SAAUA,yCAKX,IAAIU,EAAO,IAAIN,KACdH,EAAQS,EAAKC,WACbT,EAAUQ,EAAKE,aACfT,EAAUO,EAAKG,aAEhBZ,EAAQ,GAAKA,EAAQ,IAAMA,EAAMa,WAAab,EAAMa,WACpDZ,EAAU,GAAKA,EAAU,IAAMA,EAAQY,WAAaZ,EAAQY,WAC5DX,EAAU,GAAKA,EAAU,IAAMA,EAAQW,WAAaX,EAAQW,WAE5DnB,KAAKc,SAAS,CACbR,MAAOA,EACPC,QAASA,EACTC,QAASA,0CAIG,IAAAY,EAAApB,KACbA,KAAKqB,aACLrB,KAAKsB,aACLtB,KAAKuB,QAAUC,YAAY,WAC1BJ,EAAKE,cACH,iDAIHtB,KAAKyB,6DAILC,cAAc1B,KAAKuB,0CAGX,IAAAI,EAC4B3B,KAAKI,MAAjCE,EADAqB,EACArB,MAAOC,EADPoB,EACOpB,QAASC,EADhBmB,EACgBnB,QACxB,OACCoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAa/B,KAAKI,MAAMC,UACvCuB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASzB,GACxBsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWxB,GAC1BqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWvB,YAnEXwB,cCAhBC,SAAQ,CACX,CACCC,IAAK,wBACLC,KAAM,YAEP,CACCD,IAAK,8BACLC,KAAM,SAEP,CACCD,IAAK,gDACLC,KAAM,cAmBOC,EAfE,WAChB,OACCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbE,EAAMI,IAAI,SAACC,EAAOC,GAAR,OACVX,EAAAC,EAAAC,cAAA,KAAGU,IAAKD,EAAOR,UAAU,OAAOU,KAAMH,EAAMJ,KAC1CI,EAAMH,WCZEO,SAVA,WACd,OACCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,oBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,uBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAf,uBCgBYY,EAlBC,WACf,OACCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAACc,EAAD,OAEDhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAACe,EAAD,OAEDjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAACgB,EAAD,UCNeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8ba37db7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Clock.scss';\r\n\r\nclass Clock extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tfullDate: '',\r\n\t\t\thours: 0,\r\n\t\t\tminutes: '',\r\n\t\t\tseconds: '',\r\n\t\t};\r\n\t}\r\n\r\n\tupdateDate() {\r\n\t\tlet date = new Date(),\r\n\t\t\tfullDate = date.toLocaleDateString('en-EN', {\r\n\t\t\t\tweekday: 'long',\r\n\t\t\t\tmonth: 'long',\r\n\t\t\t\tday: 'numeric',\r\n\t\t\t});\r\n\t\tthis.setState({\r\n\t\t\tfullDate: fullDate,\r\n\t\t});\r\n\t}\r\n\r\n\tupdateTime() {\r\n\t\tlet date = new Date(),\r\n\t\t\thours = date.getHours(),\r\n\t\t\tminutes = date.getMinutes(),\r\n\t\t\tseconds = date.getSeconds();\r\n\r\n\t\thours < 10 ? hours = '0' + hours.toString() : hours.toString();\r\n\t\tminutes < 10 ? minutes = '0' + minutes.toString() : minutes.toString();\r\n\t\tseconds < 10 ? seconds = '0' + seconds.toString() : seconds.toString();\r\n\r\n\t\tthis.setState({\r\n\t\t\thours: hours,\r\n\t\t\tminutes: minutes,\r\n\t\t\tseconds: seconds,\r\n\t\t});\r\n\t}\r\n\r\n\tcurrentTime() {\r\n\t\tthis.updateDate();\r\n\t\tthis.updateTime();\r\n\t\tthis.timerID = setInterval(() => {\r\n\t\t\tthis.updateTime();\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.currentTime();\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timerID);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { hours, minutes, seconds } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className='timedate'>\r\n\t\t\t\t<div className='caption'>Today is</div>\r\n\t\t\t\t<div className='full-date'>{this.state.fullDate}</div>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<div className='time'>\r\n\t\t\t\t\t<div className='hours'>{hours}</div>\r\n\t\t\t\t\t<div className='minutes'>{minutes}</div>\r\n\t\t\t\t\t<div className='seconds'>{seconds}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Clock;\r\n","import React from 'react';\r\nimport './Contacts.scss';\r\n\r\nlet links = [\r\n\t{\r\n\t\turl: 'https://t.me/zagladin',\r\n\t\ttext: 'Telegram',\r\n\t},\r\n\t{\r\n\t\turl: 'mailto:georgii@zagladin.pro',\r\n\t\ttext: 'Email',\r\n\t},\r\n\t{\r\n\t\turl: 'https://www.linkedin.com/in/georgii-zagladin/',\r\n\t\ttext: 'LinkedIn',\r\n\t},\r\n];\r\n\r\nconst Contacts = () => {\r\n\treturn (\r\n\t\t<div className='contacts-card'>\r\n\t\t\t<div className='header'>Contact me</div>\r\n\t\t\t<div className='links'>\r\n\t\t\t\t{links.map((block, index) => (\r\n\t\t\t\t\t<a key={index} className='link' href={block.url}>\r\n\t\t\t\t\t\t{block.text}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport './Poster.scss';\r\n\r\nconst Poster = () => {\r\n\treturn (\r\n\t\t<div className='poster-wrapper'>\r\n\t\t\t<div className='poster-header'>Georgii Zagladin</div>\r\n\t\t\t<div className='poster-subheader'>Front-end developer</div>\r\n\t\t\t<hr />\r\n\t\t\t<div className='poster-city-caption'>Saint Petersburg</div>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Poster;\r\n","import React from 'react';\r\nimport './Wrapper.scss';\r\n\r\nimport Clock from '../clock/Clock';\r\nimport Contacts from '../contacts/Contacts';\r\nimport Poster from '../poster/Poster';\r\n\r\nconst Wrapper = () => {\r\n\treturn (\r\n\t\t<div className='background'>\r\n\t\t\t<div className='grid-container'>\r\n\t\t\t\t<div className='weather'>\r\n\t\t\t\t\t<Poster />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='clock'>\r\n\t\t\t\t\t<Clock />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='contacts'>\r\n\t\t\t\t\t<Contacts />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Wrapper;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Wrapper from './components/wrapper/Wrapper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Wrapper />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}